#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

dicionario = {} #passo 4

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
	cont_linhas = 0

	if dados == b'':
        	return sair(conexao)
       
	##### Tratamento dos dados
	
	for i in range(len(dados)): # Linhas que contem \n
		if dados[i] == 10:
			cont_linhas = cont_linhas + 1 
	
	d = b'\n'
	mensagens = dados.split(d) # Separacao em uma lista
	
	
	if b'' in mensagens:
		mensagens.remove(b'') # Limpeza de string vazias na lista

	
	for i in range(cont_linhas): # Voltando o \n apos o split
		mensagens[i] = mensagens[i] + d	

	for mensagem in mensagens:	
		if mensagem[-1] == 10: # Verifica se acabou a linha
			dados_residuais = conexao.recuperar_dados()
			msg = dados_residuais + mensagem

			initial_msg = msg.split(b' ', 1)[0]
			
			#### passo 1 ####
			if initial_msg ==  b'PING':
				conexao.enviar(b':server PONG server :' + msg.split(b' ', 1)[1])
				
			#### passo 3 ####
			if initial_msg == b'NICK':
				nick_sent = msg.split(b' ', 1)[1].rstrip(b'\r\n')
				nick = nick_sent.lower()

				### passo 4 ###
				if nick in dicionario.values(): # se o nick ja existe
					if conexao in dicionario.keys(): # se o usuario estiver mudando o nick
						apelido_antigo = dicionario[conexao]
					else: # se for o primeiro nick do usuario
						apelido_antigo = b'*'
					conexao.enviar(b':server 433 %s %s :Nickname is already in use\r\n' % (apelido_antigo, nick_sent))
						
				else:
					if validar_nome(nick): # verifica se o nome é valido
						if conexao in dicionario.keys(): # se o usuario estiver mudando o nick
							conexao.enviar(b':%s NICK %s\r\n' % (dicionario[conexao], nick))
							dicionario[conexao] = nick
						
						else: # se for o primeiro nick do usuario
							dicionario[conexao] = nick
							conexao.enviar(b':server 001 %s :Welcome\r\n' % nick) #envia mensagem de sucesso
							conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' % nick)

					else: # envia mensagem para o caso de que não for conectado corretamente
						conexao.enviar(b':server 432 * %s :Erroneous nickname\r\n' % nick)
						
			#### passo 5 ####
			if initial_msg == b'PRIVMSG':
				destinatario_apelido = msg.split(b' ')[1].lower()
				
				if destinatario_apelido in dicionario.values():
					
					for key, value in dicionario.items():
						if value == destinatario_apelido:
							destinatario = key

					conteudo = msg.split(b' ')[2]
					
					destinatario.enviar(b':%s PRIVMSG %s %s' % (dicionario[conexao], dicionario[destinatario], conteudo))

				
									
						

		else:
			dados_residuais = conexao.recuperar_dados()
			msg = dados_residuais + mensagem
			
			conexao.guardar_dados(msg)
		    
    


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()


#def troca_nomes(nomeAntigo, dados):
