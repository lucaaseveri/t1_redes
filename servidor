#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

# key: conexao, value: nickname
dicionario_nicks = {} #passo 4
# key: canal, value: lista_conexao
dicionario_canais = {} #passo 6

#lista de nomes no canal
lista_nicks = []

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def converttostr(input_seq, seperator):
	for i in range(len(input_seq)):
		if i == 0:
			final_str = b'%s ' % input_seq[i] 
		elif i == (len(input_seq)-1):
			final_str = final_str + (b'%s' % input_seq[i])
		else:
			final_str = final_str + (b'%s ' % input_seq[i])
	return final_str

def sair(conexao):
	### passo 8 ###
	#conexao.enviar(b':%s QUIT' % dicionario_nicks.values())
	print(conexao, 'conexão fechada')
    
	conexao.fechar()


def dados_recebidos(conexao, dados):
	cont_linhas = 0

	if dados == b'':
        	return sair(conexao)
       
	##### Tratamento dos dados
	
	for i in range(len(dados)): # Linhas que contem \n
		if dados[i] == 10:
			cont_linhas = cont_linhas + 1 
	
	d = b'\n'
	mensagens = dados.split(d) # Separacao em uma lista
	
	
	if b'' in mensagens:
		mensagens.remove(b'') # Limpeza de string vazias na lista

	
	for i in range(cont_linhas): # Voltando o \n apos o split
		mensagens[i] = mensagens[i] + d	

	for mensagem in mensagens:	
		if mensagem[-1] == 10: # Verifica se acabou a linha
			dados_residuais = conexao.recuperar_dados()
			msg = dados_residuais + mensagem

			initial_msg = msg.split(b' ', 1)[0]
			
			#### passo 1 ####
			if initial_msg ==  b'PING':
				conexao.enviar(b':server PONG server :' + msg.split(b' ', 1)[1])
				
			#### passo 3 ####
			if initial_msg == b'NICK':
				nick_sent = msg.split(b' ', 1)[1].rstrip(b'\r\n')
				nick = nick_sent.lower()

				### passo 4 ###
				if nick in dicionario_nicks.values(): # se o nick ja existe
					if conexao in dicionario_nicks.keys(): # se o usuario estiver mudando o nick
						apelido_antigo = dicionario_nicks[conexao]
					else: # se for o primeiro nick do usuario
						apelido_antigo = b'*'
					conexao.enviar(b':server 433 %s %s :Nickname is already in use\r\n' % (apelido_antigo, nick_sent))
						
				else:
					if validar_nome(nick): # verifica se o nome é valido
						if conexao in dicionario_nicks.keys(): # se o usuario estiver mudando o nick
							conexao.enviar(b':%s NICK %s\r\n' % (dicionario_nicks[conexao], nick))
							dicionario_nicks[conexao] = nick
						
						else: # se for o primeiro nick do usuario
							dicionario_nicks[conexao] = nick
							conexao.enviar(b':server 001 %s :Welcome\r\n' % nick) #envia mensagem de sucesso
							conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' % nick)

					else: # envia mensagem para o caso de que não for conectado corretamente
						conexao.enviar(b':server 432 * %s :Erroneous nickname\r\n' % nick)
						
			#### passo 5 ####
			if initial_msg == b'PRIVMSG':
				destinatario_apelido = msg.split(b' ')[1].lower()
			
				
				if destinatario_apelido[0] == 35: # Se for mensagem para grupo
					conteudo = msg.split(b' ')[2]
					
					for key, value in dicionario_canais.items():
						if key == destinatario_apelido: 
							for destinatario in value:
								print('chegou aqui 1 vez')
								if destinatario != conexao:
									destinatario.enviar(b':%s PRIVMSG %s %s' % (dicionario_nicks[conexao], key, conteudo))
									
				else: # Se for mensagem individual
					if destinatario_apelido in dicionario_nicks.values():
						
						for key, value in dicionario_nicks.items():
							if value == destinatario_apelido:
								destinatario = key
								break

						conteudo = msg.split(b' ')[2]
						
						destinatario.enviar(b':%s PRIVMSG %s %s' % (dicionario_nicks[conexao], dicionario_nicks[destinatario], conteudo))
						
			#### passo 6 ####

			if initial_msg == b'JOIN':
				canal = msg.split(b' ')[1].lower()
				validacao = False
				
				# Validação dos nomes
				if canal.endswith(b'\r\n'):
					nome_canal_limpo = canal[1:-2]
					nome_canal = canal[:-2]
				elif canal.endswith(b'\n'):
					nome_canal_limpo = canal[1:-1]
					nome_canal = canal[:-1]
				else:
					nome_canal_limpo = canal[1:]
					nome_canal = canal
				
				if (canal[0] == 35) and (validar_nome(nome_canal_limpo)):
					validacao = True
					
					
				# Se o nome foi validado
				if validacao:
					# Se o canal ja existir
					if nome_canal in dicionario_canais.keys():
					
						dicionario_canais[nome_canal].append(conexao)

						for key, value in dicionario_canais.items():
							if key == nome_canal:
								for destinatario in value:
									destinatario.enviar(b':%s JOIN :%s\r\n' % (dicionario_nicks[conexao], nome_canal))
									
					# Se o canal ainda nao existir
					else:
						# Cria uma lista vazia e insere
						dicionario_canais[nome_canal] = []
						dicionario_canais[nome_canal].append(conexao)
						conexao.enviar(b':%s JOIN :%s\r\n' % (dicionario_nicks[conexao], nome_canal))
					
					lista_conexoes = list(dicionario_canais[nome_canal])
					
					# Criando lista de nicks que estao no canal para enviar no server 353
					for conex in lista_conexoes:
						if dicionario_nicks[conex] not in lista_nicks:	
							lista_nicks.append(dicionario_nicks[conex])
					
					separador = ' '
					conexao.enviar(b':server 353 %s = %s :%s\r\n' % (dicionario_nicks[conexao], nome_canal, converttostr(lista_nicks, separador)))
					
					
					conexao.enviar(b':server 366 %s %s :End of /NAMES list.\r\n' % (dicionario_nicks[conexao], nome_canal))
					
					
				else:
					conexao.enviar(b':server 403 %s :No such channel.' % canal[:-2])
			
			### passo 7 ###
			if initial_msg == b'PART':
				canal = msg.split(b' ')[1].lower().rstrip(b'\r\n')
				
				if canal in dicionario_canais.keys():
				
					for key, value in dicionario_canais.items():
							if key == canal:
								for destinatario in value:	
									if destinatario == conexao:
										destinatario.enviar(b':%s PART %s\r\n' % (dicionario_nicks[conexao], canal))
										dicionario_canais[key].remove(destinatario)
										break
								for destinatario in value:
									destinatario.enviar(b':%s PART %s\r\n' % (dicionario_nicks[conexao], canal))
											

		else:
			dados_residuais = conexao.recuperar_dados()
			msg = dados_residuais + mensagem
			
			conexao.guardar_dados(msg)
		    
    


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()


#def troca_nomes(nomeAntigo, dados):
