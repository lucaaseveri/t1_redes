#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
	cont_linhas = 0

	if dados == b'':
        	return sair(conexao)
       
       
	##### Tratamento dos dados
	
	for i in range(len(dados)): # Linhas que contem \n
		if dados[i] == 10:
			cont_linhas = cont_linhas + 1 
	
	d = b'\n'
	mensagens = dados.split(d) # Separacao em uma lista
	
	
	if b'' in mensagens:
		mensagens.remove(b'') # Limpeza de string vazias na lista

	
	for i in range(cont_linhas): # Voltando o \n apos o split
		mensagens[i] = mensagens[i] + d	

	for mensagem in mensagens:	
		if mensagem[-1] == 10: # Verifica se acabou a linha
			dados_residuais = conexao.recuperar_dados()
			msg = dados_residuais + mensagem

			initial_msg = msg.split(b' ', 1)[0]
			
			if initial_msg ==  b'PING':
				conexao.enviar(b':server PONG server :' + msg.split(b' ', 1)[1])
				print(conexao, msg)
			#### passo 3 ####
			if initial_msg == b'NICK':
				if validar_nome( msg.split(b' ', 1)[1].rstrip(b'\r\n')): #verifica se o nome é valido, não pode ter o \r\n então é usado o strip
					conexao.enviar(b':server 001 %s :Welcome\r\n' % msg.split(b' ', 1)[1].rstrip(b'\r\n')) #envia duas mensagens para mostrar que foi conectado, houve tratamento do \r\n
					conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' % msg.split(b' ', 1)[1].rstrip(b'\r\n'))
				else: #envia mensagem para o caso de que não for conectado corretamente
					conexao.enviar(b':server 432 * %s :Erroneous nickname\r\n' % msg.split(b' ', 1)[1].rstrip(b'\r\n'))

		else:
			dados_residuais = conexao.recuperar_dados()
			msg = dados_residuais + mensagem
			
			conexao.guardar_dados(msg)
		    
    


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
